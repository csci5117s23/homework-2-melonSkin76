/*
* Modified based on Tech-Stack-2-Kluver-Demo
*/
import { addTodoItem, getTodoItems } from "@/modules/Data";
import Head from 'next/head'
import Link from 'next/link';
import React, { useState, useEffect } from "react";
import { TodoItemsList } from "@/components/TodoItemsList";
import { useAuth } from "@clerk/nextjs";
import { UserButton } from "@clerk/clerk-react";

export default function Todo(){
    const { isLoaded, userId, getToken } = useAuth();
    const [loading, setLoading] = useState(true);
    const [todoItemsList, setTodoItemsList] = useState([]);
    const [todoItemText, setTodoItemText] = useState("");

    useEffect(() => {
      async function process() {
        if (userId) {
          const authToken = await getToken({ template: "codehooks" });
          
          // fetch the list of items from backend and update the frontend useState
          let todoItems = await getTodoItems(authToken);
          todoItems = todoItems.filter(todoItem => !todoItem.isDone);
          setTodoItemsList(todoItems.sort((a, b) => a.createdOn < b.createdOn ? 1 : (a.createdOn > b.createdOn ? -1 : 0))); 
          setLoading(false);
        }
      }
      process();
    }, [isLoaded]);

    async function add() {
        const authToken = await getToken({ template: "codehooks" });

        // add the new todoItem to backend
        await addTodoItem(authToken, todoItemText);

        // fetch the list of items from backend and update the frontend useState
        let todoItems = await getTodoItems(authToken);
        todoItems = todoItems.filter(todoItem => !todoItem.isDone);
        setTodoItemsList(todoItems.sort((a, b) => a.createdOn < b.createdOn ? 1 : (a.createdOn > b.createdOn ? -1 : 0))); 
        setTodoItemText("");
    }

    function refresh(updatedItems){
      const undoneItems = updatedItems.filter(updatedItem => !updatedItem.isDone);
      setTodoItemsList(undoneItems.sort((a, b) => a.createdOn < b.createdOn ? 1 : (a.createdOn > b.createdOn ? -1 : 0)));
    }
 
    // The text input handling in the following blocks is referenced from https://stackoverflow.com/questions/55757761/handle-an-input-with-react-hooks
    if (loading) {
      return (
        <>
          <Head>
            <title>Loading...</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="loadingMain">
            <h1 className="loadingTitle"> Loading... </h1>
          </main>
        </>
      )
    } else {
      return (
        <>
          <Head>
            <title>The List of Undone To-do Items</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="todoMain">
            <UserButton></UserButton>
            <h1 className="todoTitle">The List of Undone To-do Items</h1>
            <div className="addBar">
                <input className="addInput" value={ todoItemText } onChange={(e) => setTodoItemText(e.target.value)} placeholder="Enter a Todo here..."></input>
                <button className="addButton" onClick={ add }>Add</button>
            </div>
            <TodoItemsList todoItems={ todoItemsList } refresh={ refresh }></TodoItemsList>
            <div className="doneLink">
              <Link href={ '/done' }> Visit Done To-do Items </Link>
            </div>
          </main>
        </>
      )
    }
}
